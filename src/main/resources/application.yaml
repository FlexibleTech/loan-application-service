spring:
  application:
    name: loan-application-service
  cache:
    cache-names: pre-approved-offers-cache
    caffeine:
      spec: expireAfterAccess=1h
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/loan_application_db
    username: postgres
    password: password
    hikari:
      data-source-properties:
        currentSchema: ${schemas.camunda}
        useUnicode: true
        characterEncoding: utf8
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db.migration
    default-schema: ${schemas.domain}
    schemas: ${schemas.domain}
  jpa:
    hibernate.ddl-auto: validate
    properties:
      hibernate:
        default_schema: ${schemas.domain}
  cloud:
    stream:
      function:
        definition: riskResponseListener;issuanceResponseListener;
      rabbit:
        binder:
          nodes: localhost:5672
      kafka:
        binder:
          brokers: localhost:9092
          autoCreateTopics: true
      bindings:
        riskResponseListener-in-0:
          binder: rabbit
          destination: ${RISK_RESPONSE_QUEUE:risk.response}
        issuanceResponseListener-in-0:
          binder: rabbit
          destination: ${ISSUANCE_RESPONSE_QUEUE:issuance.response}
        issuanceDestination:
          binder: rabbit
          destination: ${ISSUANCE_REQUEST_QUEUE:issuance.request}
        riskDestination:
          binder: rabbit
          destination: ${RISK_REQUEST_QUEUE:risk.request}
        eventDestination:
          binder: kafka
          destination: ${EVENTS_TOPIC:loan.application.events}

minio:
  access-key: minioadmin
  secret-key: minioadmin
  bucket: bucket
  url: http://127.0.0.1:9000

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 100
        permittedNumberOfCallsInHalfOpenState: 10
        waitDurationInOpenState: 6000
        failureRateThreshold: 60
        eventConsumerBufferSize: 10
        registerHealthIndicator: true
    instances:
      pre-approved-offers-service:
        baseConfig: default
      print-service:
        baseConfig: default
      document-storage:
        baseConfig: default

camunda:
  bpm:
    admin-user:
      password: admin
      id: admin
      first-name: admin
      last-name: admin
    id-generator: strong
    database:
      schema-update: true
      schema-name: ${schemas.camunda}
      table-prefix: ${schemas.camunda}.
      type: postgres
    default-number-of-retries: 1

schemas:
  domain: domain
  camunda: camunda

service:
  print:
    url: http://localhost:8085
  preapprovedoffer:
    url: http://localhost:8087